Deﬁne a procedure square-tree analogous to the square-list procedure of
Exercise 2.21. That is, square-tree should behave as follows:

(square-tree '(1 (2 (3 4) 5) (6 7)))
(1 (4 (9 16) 25) (36 49))

Deﬁne square-tree both directly (i.e., without using any higherorder procedures) and also by using map and recursion.

(defn square-tree [t]
  (letfn [(square [x] (* x x))
          (f [[x & more] res]
            (if x
              (if (sequential? x) 
                (f more (conj res (square-tree x)))
                (f more (conj res (square x))))
              res))]
    (lazy-seq
      (f t []))))

(defn square-tree [t]
  (letfn [(square [x] (* x x))
          (f [x]
            (if (sequential? x) 
              (square-tree x)
              (square x)))]
    (map f t)))
