The accumulate procedure is also known as fold-right, because it combines the
Ô¨Årst element of the sequence with the result of combining all the elements to
the right.  There is also a fold-left, which is similar to fold-right, except
that it combines elements working in the opposite direction:

;this is actually the reduce we have been using
(defn fold-left [op initial sequence]
  (letfn [(iter [result r]
            (if (seq r)
              (iter (op result (first r)) (rest r))
              result))]
    (iter initial sequence)))

;this is the original accumulate function
(defn fold-right [op initial sequence]
  (if (seq sequence)
    (op (first sequence) (fold-right op initial (rest sequence)))
    initial))

What are the values of
(fold-right / 1 (list 1 2 3))
3/2

(fold-left / 1 (list 1 2 3))
1/6

(fold-right list '() (list 1 2 3))
(1 (2 (3 ())))

(fold-left list '() (list 1 2 3))
(((() 1) 2) 3)

Give a property that op should satisfy to guarantee that fold-right and fold-left
will produce the same values for any sequence.

It must be commutative.
