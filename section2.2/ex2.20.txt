The procedures +, *, and list take arbitrary numbers of arguments. One way to
deﬁne such procedures is to use define with ampersand-tail notation. In a
procedure deﬁnition, a parameter list that has an ampersand before the last
parameter name indicates that, when the procedure is called, the initial
parameters (if any) will have as values the initial arguments, as usual, but
the ﬁnal parameter’s value will be a list of any remaining arguments. For
instance, given the deﬁnition

(define f [x y & z] 
  <body>)

the procedure f can be called with two or more arguments. If we evaluate

(f 1 2 3 4 5 6)

then in the body of f, x will be 1, y will be 2, and z will be the list (3 4 5
6). Given the deﬁnition 

(define (g & w) 
  <body>)

the procedure g can be called with zero or more arguments. If we evaluate

(g 1 2 3 4 5 6)

then in the body of g, w will be the list (1 2 3 4 5 6).

Use this notation to write a procedure same-parity that takes one or more
integers and returns a list of all the arguments that have the same even-odd
parity as the ﬁrst argument. For example, 

(same-parity 1 2 3 4 5 6 7)
(1 3 5 7)

(same-parity 2 3 4 5 6 7)
(2 4 6)

(defn same-parity [[x xs :as all]]
  (if (odd? x)
    (filter odd? all)
    (filter even? all)))
