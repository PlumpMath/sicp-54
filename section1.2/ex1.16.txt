Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does fast-expt. 
(Hint: Using the observation that (b^n/2)^2 = (b^2)^n/2 , keep, along with the exponent n and the base b, an additional state variable a, 
and deﬁne the state transformation in such a way that the product ab^n is unchanged from state to state. 
At the beginning of the process a is taken to be 1, and the answer is given by the value of a at the end of the process.
In general, the technique of deﬁning an invariant quantity that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.)

(defn iter-exp [b n]
  (loop [b b n n a 1]
    (if (= 1 n)
      a
      (if (even? n)
        (recur b (/ n 2) (* a (* b b)))
        (recur b (dec n) (* a b))))))
