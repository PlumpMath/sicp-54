Most Lisp implementations include a primitive called runtime that returns an integer that speciﬁes the amount of time the system has been running (measured, for example,
in microseconds). The following timed-prime-test procedure, when called with an integer n, prints n and checks to see if n is prime. If n is prime, the procedure prints three asterisks followed
by the amount of time used in performing the test.

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
  (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

Using this procedure, write a procedure search-for-primes that checks the primality of consecutive odd integers in a speciﬁed range. Use your procedure to ﬁnd the three smallest primes larger
than 1000; larger than 10,000; larger than 100,000; larger than 1,000,000. Note the time needed to test each prime. Since the testing algorithm has order of growth of O(quare-root n), 
you should expect that testing for primes around 10,000 should take about square-root 10 times as long as testing for primes around 1000. Do your timing data bear this out? 
How well do the data for 100,000 and 1,000,000 support the O(square-root n) prediction? 
Is your result compatible with the notion that programs on your machine run in time proportional to the number of steps required for the computation?

Going to ignore the above procedure as clojure already has the time macro.

(defn prime? [n]
  (= n (smallest-divisor n)))

(defn all-primes-starting-at [n]
  (filter #(not (nil? %))
    (map #(when (prime? %) %) (iterate inc n))))

(defn search-for-primes [n]
  (time (doall (take 3 (all-primes-starting-at n))))) ;take is lazy, we need to force it otherwise time would not time

(search-for-primes 1000)
0.299 msecs
(1009 1013 1019)

(search-for-primes 10000)
0.521 msecs
(10007 10009 10037)

(search-for-primes 100000)
0.67 msecs
(100003 100019 100043)

(search-for-primes 1000000)
0.757 msecs
(1000003 1000033 1000037)

(search-for-primes 10000000)
2.164 msecs
(10000019 10000079 10000103)

Not very well. For instance sqrt 10000 is 100, and the sqrt of 1.000.000 is 1000, so the computation for the latter should be 10x slower than the former, which is not the case. Even when the latter computation had to compute more than the double of the elements. I think the answer to this is that there are other operations that are more dominant which influences the result of the timings.
