Consider the problem of representing line segments in a plane. Each segment is
represented as a pair of points: a starting point and an ending point. Deﬁne a
constructor make-segment and selectors start-segment and end-segment that deﬁne
the representation of segments in terms of points.  Furthermore, a point can be
represented as a pair of numbers: the x coordinate and the y coordinate. 

Accordingly, specify a constructor make-point and selectors x-point and y-point
that deﬁne this representation. Finally, using your selectors and constructors,
deﬁne a procedure midpoint-segment that takes a line segment as argument and
returns its midpoint (the point whose coordinates are the average of the 
coordinates of the endpoints). To try your procedures, you’ll need a way to 
print points:

(defn print-point [p]
  (println  "(" (x-point p) "," (y-point p) ")"))

(defn mk-point [s e]
  [s e])

(defn x-point [[s e]]
  s)

(defn y-point [[s e]]
  e)

(defn mk-seg [p1 p2]
  [p1 p2])

(defn start-seg [[s e]]
  s)

(defn end-seg [[s e]]
  e)

(defn seg-midpoint [s]
  (let [x (start-seg s)
        y (end-seg s)
        dx (- (x-point y) (x-point x))
        dy (- (y-point y) (y-point x))]
    (mk-point (+ (x-point x) (/ dx 2)) 
              (+ (y-point x) (/ dy 2)))))
