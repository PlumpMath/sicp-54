Implement a representation for rectangles in a plane.

(Hint: You may want to make use of Exercise 2.2.) 

In terms of your constructors and selectors, create procedures that compute the
perimeter and the area of a given rectangle. Now implement a different 
representation for rectangles. Can you design your system with suitable
abstraction barriers, so that the same perimeter and area procedures will work
using either representation?

; belongs to segment
(defn seg-length [s] 
  (let [dx (- (x-point (end-seg s)) (x-point (start-seg s)))
        dy (- (y-point (end-seg s)) (y-point (start-seg s)))]
    (Math/sqrt (+ (* dx dx) (* dy dy)))))

; rectangle
; caveat i'm not verifying that this two segments actually make a rectangle
(defn mk-rect [s1 s2]
  [s1 s2])

(defn rec-side1 [r]
  (first r))

(defn rec-side2 [r]
  (second r))

(defn rec-side1-length [r]
  (seg-length (side1-rect r)))

(defn rec-side2-length [r]
  (seg-lenth (side2-rect r)))

(defn perimeter-rect [r]
  (* 2 (+ (rec-side1-length r) (rec-side2-length r))))

(defn area-rect [r]
  (* (rec-side1-length r) (rec-side2-length r)))

; another representation
(defn mk-rect [p1 p2 p3]
  [p1 p2 p3])

(defn rec-side1 [r]
  [(first r) (second r)])

(defn side2-length [r]
  [(second r) (nth r 2)])
