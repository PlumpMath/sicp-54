Newton’s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value

(x/y2 + 2y) / 3

Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In Section 1.3.4 we will see how to implement Newton’s method in general as an abstraction of these square-root and cube-root procedures.)

> (defn good-enough? [guess last-guess] 
    (< (Math/abs (- guess last-guess)) 
       0.001))
#'user/good-enough?

> (defn improve [guess x] 
    (/ (+ (/ x (* guess guess)) (* 2 guess)) 3))
#'user/improve

> (defn cubert-iter [guess last-guess x] 
    (if (good-enough? guess last-guess) 
      guess 
      (recur (improve guess x) guess x)))
#'user/cubert-iter

> (defn cubert [x] 
    (cubert-iter 1.0 0.0 x))
#'user/cubert

> (cubert 27)
3.0000000000000977

> (cubert 81)
4.326748733642904

> (cubert 64)
4.000000000076121

> (cubert 64469873469837)
40097.65171577767
