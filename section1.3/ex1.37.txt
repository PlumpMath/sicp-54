a. An inﬁnite continued fraction is an expression of the form

f = N1 / D1 + (N2 / D2 + (N3  / D3 + ...

As an example, one can show that the inﬁnite continued fraction expansion with
the Ni and the Di all equal to 1 produces 1/fi, where fi is the golden ratio 
(described in Section 1.2.2). One way to approximate an inﬁnite continued 
fraction is to truncate the expansion after a given number of terms. Such a 
truncation — a so-called k-term ﬁnite continued fraction — has the form

N1 / D1 + ( N2 / (... + (Nk / Dk)))

Suppose that n and d are procedures of one argument (the term index i) that 
return the Ni and Di of the terms of the continued fraction.
Deﬁne a procedure cont-frac such that evaluating (cont-frac n d k) computes the
value of the k-term ﬁnite continued fraction. Check your procedure by 
approximating 1/fi using

(cont-frac
  (fn [i] 1.0)
  (fn [i] 1.0) 
  k)

for successive values of k. How large must you make k in order to get an 
approximation that is accurate to 4 decimal places?  

(defn cont-frac [n d k]
  (letfn [(acc [n d a]
            (if (= a k)
              (/ (n k) (d k))
              (/ (n a) (+ (d a) (acc n d (inc a))))))]
    (acc n d 1)))
    
the golden ratio = 1.61803399

(/ 1 (cont-frac (fn [i] 1.0) (fn [i] 1.0) 11))
1.6179775280898876

(/ 1 (cont-frac (fn [i] 1.0) (fn [i] 1.0) 12))
1.6180555555555558

so k = 12.

b. If your cont-frac procedure generates a recursive process, write one that 
generates an iterative process. If it generates an iterative process, write one
that generates a recursive process.

(defn cont-frac [n d k]
  (letfn [(acc [n d k result]
            (if (zero? k)
              result
              (recur n d (dec k) (/ (n k) (+ (d k) result)))))]
    (acc n d k 0)))
