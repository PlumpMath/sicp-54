Several of the numerical methods described in this chapter are instances of an
extremely general computational strategy known as iterative improvement. 
Iterative improvement says that, to compute something, we start with an initial
guess for the answer, test if the guess is good enough, and otherwise improve 
the guess and continue the process using the improved guess as the new guess. 
Write a procedure iterative-improve that takes two procedures as arguments: a 
method for telling whether a guess is good enough and a method for improving a
guess. Iterative-improve should return as its value a procedure that takes a 
guess as argument and keeps improving the guess until it is good enough. 
Rewrite the sqrt procedure of Section 1.1.7 and the fixed-point procedure of 
Section 1.3.3 in terms of iterative-improve.

(defn iterative-improve [good-enough? improve-guess]
  (fn [guess]
    (let [improved-guess (improve-guess guess)]
      (if (good-enough? guess improved-guess)
        improved-guess
        ((iterative-improve good-enough? improve-guess) improved-guess)))))

(defn fixed-point [f first-guess]
  ((iterative-improve #(< (Math/abs (- %1 %2)) 0.00001) #(f %)) first-guess))

(defn sqrt [x]
  ((iterative-improve (fn [_ guess] (< (- (* guess guess) x) 0.00001)) #(average % (/ x %))) 1.0))
