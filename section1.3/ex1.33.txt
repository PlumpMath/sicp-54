You can obtain an even more general version of accumulate (Exercise 1.32) by
introducing the notion of a ﬁlter on the terms to be combined. That is, 
combine only those terms derived from values in the range that satisfy a 
speciﬁed condition. The resulting filtered-accumulate abstraction takes the 
same arguments as accumulate, together with an additional predicate of one 
argument that speciﬁes the ﬁlter.

Write filtered-accumulate as a procedure. Show how to express the following 
using filtered-accumulate:

(defn filtered-accumulate [filter combiner null-value term a next b]
  (if (> a b)
    null-value
    (if (filter? a)
      (combiner (term a)
                (accumulate term (next a) next b))
      (combiner null-value
                (accumulate term (next a) next b)))))

a. the sum of the squares of the prime numbers in the interval a to b (assuming 
that you have a prime? predicate already written) 

(defn sum-squares-primes [a b]
  (filtered-accumulate prime? + 0 square a inc b))

b. the product of all the positive integers less than n that are relatively 
prime to n (i.e., all positive integers i < n such that GCD(i, n) = 1).

(defn product-pos-int-prime-to [n]
  (filtered-accumulate #(= 1 (gcd n %)) * 1 indentity a inc b))
