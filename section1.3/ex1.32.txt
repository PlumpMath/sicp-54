a. Show that sum and product (Exercise 1.31) are both special cases of a still 
more general notion called accumulate that combines a collection of terms, 
using some general accumulation function:

(accumulate combiner null-value term a next b)

Accumulate takes as arguments the same term and range speciﬁcations as sum and 
product, together with a combiner procedure (of two arguments) that speciﬁes 
how the current term is to be combined with the accumulation of the preceding 
terms and a null-value that speciﬁes what base value to use when the terms run
out. Write accumulate and show how sum and product can both be deﬁned as simple 
calls to accumulate.  

(defn accumulate [combiner null-value term a next b]
  (if (> a b)
    null-value
    (combiner (term a)
              (accumulate term (next a) next b))))

(defn sum [term a next b]
  (accumulate + 0 term a next b))

(defn product [term a next b]
  (accumulate * 1 term a next b))

b. If your accumulate procedure generates a recursive process, write one that 
generates an iterative process. If it generates an iterative process, write one 
that generates a recursive process.

(defn accumulate [combiner null-value term a next b]
  (letfn [(iter [a result]
            (if (> a b)
              result
              (recur (next a) (combiner result (term a)))))]
    (iter a null-value)))
