a. The sum procedure is only the simplest of a vast number of similar abstractions that can be captured as higher-order procedures.

Write an analogous procedure called product that returns the product of the values of a function at points over a given range. 
Show how to deﬁne factorial in terms of product. Also use product to compute approximations to pi using the formula

pi = 2 . 4 . 4 . 6 . 6 . 8 . . .  
/4   3 . 3 . 5 . 5 . 7 . 7 . . .

I tried the following equivalent formula, given that the one above was not working for me... :P

pi = 2 . 2 . 4 . 4 . 6 . 6 . 8 . . .  
/2   1 . 3 . 3 . 5 . 5 . 7 . 7 . . .

(defn product [term a next b]
  (if (> a b)
    1
    (* (term a)
       (product term (next a) next b))))

(defn fac [x]
  (product * 1 inc x))

(defn pi [n]
  (* 2 (/ (* (product identity 2N #(+ 2 %) (+ 2 n)) (product identity 2N #(+ 2 %) (+ 2 n)))
          (* (product identity 1N #(+ 2 %) (inc n)) (product identity 3N #(+ 2 %) (+ 3 n))))))

b. If your product procedure generates a recursive process, write one that generates an iterative process.
If it generates an iterative process, write one that generates a recursive process.

(defn product [term a next b]
  (letfn [(iter [a result]
            (if (> a b)
              result
              (recur (next a) (* result (term a)))))]
    (iter a 1)))
